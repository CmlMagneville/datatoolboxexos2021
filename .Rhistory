nb_eco   = unique(ecoregion))
summary_ursus <- data_ursus %>%
dplyr::group_by(species) %>%
dplyr::summarize(nb_realm = unique(realm),
nb_biome = unique(biome))
summary_ursus <- data_ursus %>%
dplyr::group_by(species) %>%
dplyr::summarise(nb_realm = unique(realm),
nb_biome = unique(biome),
nb_eco   = unique(ecoregion))
data_ursus %>%
dplyr::group_by(species)
summary_ursus <- data_ursus %>%
dplyr::group_by(species) %>%
dplyr::summarise(nb_realm = unique(realm))
summary_ursus
summary_ursus <- data_ursus %>%
dplyr::mutate(species = as.factor(species)) %>%
dplyr::group_by(species) %>%
dplyr::summarise(nb_realm = unique(realm))
summary_ursus
summary_ursus <- data_ursus %>%
dplyr::mutate(species = as.factor(species)) %>%
dplyr::group_by(species) %>%
dplyr::summarise(nb_realm = n_distinct(realm),
nb_biome = n_distinct(biome),
nb_eco   = n_distinct(ecoregion))
summary_ursus <- data_ursus %>%
dplyr::mutate(sci_name = as.factor(sci_name)) %>%
dplyr::group_by(sci_name) %>%
dplyr::summarise(nb_realm = n_distinct(realm),
nb_biome = n_distinct(biome),
nb_eco   = n_distinct(ecoregion))
summary_ursus <- data_ursus %>%
dplyr::mutate(sci_name = as.factor(sci_name)) %>%
dplyr::group_by(sci_name) %>%
dplyr::summarise(nb_realm = dplyr::n_distinct(realm),
nb_biome = dplyr::n_distinct(biome),
nb_eco   = dplyr::n_distinct(ecoregion))
summary_ursus
nrow(dplyr::inner_join(data_eco, data_sp_eco, by = "ecoregion_id"))
nrow(dplyr::left_join(data_eco, data_sp_eco, by = "ecoregion_id"))
setdiff(dplyr::left_join(data_eco, data_sp_eco, by = "ecoregion_id"),
dplyr::inner_join(data_eco, data_sp_eco, by = "ecoregion_id"))
)
setdiff(dplyr::left_join(data_eco, data_sp_eco, by = "ecoregion_id"),
dplyr::inner_join(data_eco, data_sp_eco, by = "ecoregion_id"))
# garder les especes du genre Ursidae et supprimer l'espece Ursus malayanus:
data_ursus <- data_full %>%
dplyr::filter(family == 'Ursidae') %>%
dplyr::filter(sci_name != "Ursus_malayanus")
summary_ursus <- data_ursus %>%
# change en facteur le nom des especes:
dplyr::mutate(sci_name = as.factor(sci_name)) %>%
# on groupe en fonction des noms d'especes:
dplyr::group_by(sci_name) %>%
# on cree 3 colonnes qui representent le nombre de realm...
dplyr::summarise(nb_realm = dplyr::n_distinct(realm),
nb_biome = dplyr::n_distinct(biome),
nb_eco   = dplyr::n_distinct(ecoregion))
summary_ursus
pantheria <- readr::read_delim("data/pantheria-traits/PanTHERIA_1-0_WR05_Aug2008.txt", delim = "\t")
View(pantheria)
?na_if
pantheria_clean <- pantheria %>%
# convert 2 columns as factors:
dplyr::mutate(MSW05_Order = as.factor(MSW05_Order),
MSW05_Family = as.factor(MSW05_Family)) %>%
# rename some columns:
dplyr::rename("5-1_AdultBodyMass_g" = "Adult_Body_Mass",
"7-1_DispersalAge_d"  = "Dispersal_Age",
"9-1_GestationLen_d"  = "Gestation",
"22-2_HomeRange_Indiv_km2" = "Home_Range",
"16-1_LittersPerYear"      = "Litter_Per_Year",
"17-1_MaxLongevity_m"      = "Max_Longevity") %>%
# select a few columns:
dplyr::select("MSW05_Family", "MSW05_Order",
"Max_Longevity", "Home_Range",
"Litter_Per_Year") %>%
# replace -999 value by NA:
na_if(-999)
pantheria_clean <- pantheria %>%
# convert 2 columns as factors:
dplyr::mutate(MSW05_Order = as.factor(MSW05_Order),
MSW05_Family = as.factor(MSW05_Family)) %>%
# rename some columns:
dplyr::rename("5-1_AdultBodyMass_g" = "Adult_Body_Mass",
"7-1_DispersalAge_d"  = "Dispersal_Age",
"9-1_GestationLen_d"  = "Gestation",
"22-2_HomeRange_Indiv_km2" = "Home_Range",
"16-1_LittersPerYear"      = "Litter_Per_Year",
"17-1_MaxLongevity_m"      = "Max_Longevity") %>%
# select a few columns:
dplyr::select("MSW05_Family", "MSW05_Order",
"Max_Longevity", "Home_Range",
"Litter_Per_Year") %>%
# replace -999 value by NA:
dplyr::na_if(-999)
# utilise read_delim car pas un comma separated file:
pantheria <- readr::read_delim("data/pantheria-traits/PanTHERIA_1-0_WR05_Aug2008.txt", delim = "\t")
pantheria_clean <- pantheria %>%
# convert 2 columns as factors:
dplyr::mutate(MSW05_Order = as.factor(MSW05_Order),
MSW05_Family = as.factor(MSW05_Family)) %>%
# rename some columns:
dplyr::rename("5-1_AdultBodyMass_g" = "Adult_Body_Mass",
"7-1_DispersalAge_d"  = "Dispersal_Age",
"9-1_GestationLen_d"  = "Gestation",
"22-2_HomeRange_Indiv_km2" = "Home_Range",
"16-1_LittersPerYear"      = "Litter_Per_Year",
"17-1_MaxLongevity_m"      = "Max_Longevity") %>%
# select a few columns:
dplyr::select("MSW05_Family", "MSW05_Order",
"Max_Longevity", "Home_Range",
"Litter_Per_Year") %>%
# replace -999 value by NA:
dplyr::na_if(-999)
?rename
pantheria_clean <- pantheria %>%
# convert 2 columns as factors:
dplyr::mutate(MSW05_Order = as.factor(MSW05_Order),
MSW05_Family = as.factor(MSW05_Family)) %>%
# rename some columns:
dplyr::rename("Adult_Body_Mass" = "5-1_AdultBodyMass_g",
"Dispersal_Age"   = "7-1_DispersalAge_d",
"Gestation"       = "9-1_GestationLen_d",
"Home_Range"      = "22-2_HomeRange_Indiv_km2",
"Litter_Per_Year" =  "16-1_LittersPerYear",
"Max_Longevity"   = "17-1_MaxLongevity_m") %>%
# select a few columns:
dplyr::select("MSW05_Family", "MSW05_Order",
"Max_Longevity", "Home_Range",
"Litter_Per_Year") %>%
# replace -999 value by NA:
dplyr::na_if(-999)
View(pantheria_clean)
# combien d'observations dans chaque famille / chaque ordre pour famille et ...
# ... ordre de + de 100 observations?
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot() +
aes(x = n, y = MSW05_Family) +
geom_bar()
# combien d'observations dans chaque famille / chaque ordre pour famille et ...
# ... ordre de + de 100 observations?
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
aes(x = n, y = MSW05_Family) +
geom_bar()
library(tidyverse)
# combien d'observations dans chaque famille / chaque ordre pour famille et ...
# ... ordre de + de 100 observations?
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
aes(x = n, y = MSW05_Family) +
geom_bar()
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100)
# combien d'observations dans chaque famille / chaque ordre pour famille et ...
# ... ordre de + de 100 observations?
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
aes(x = n, y = MSW05_Family) +
geom_col()
?reoder
?reorder
pantheria_clean %>%
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
aes(x = n, y = dplyr::reoder(MSW05_Family, n) +
geom_col()
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
aes(x = n, y = dplyr::reorder(MSW05_Family, n)) +
geom_col()
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
aes(x = n, y = reorder(MSW05_Family, n)) +
geom_col()
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
ggplot2::aes(x = n, y = reorder(MSW05_Family, n)) +
ggplot2::geom_col() +
ggplot2::ylab("Family names") +
ggplot2::ylab("Counts")
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
ggplot2::aes(x = n, y = reorder(MSW05_Family, n)) +
ggplot2::geom_col() +
ggplot2::ylab("Family names") +
ggplot2::xlab("Counts")
pantheria_clean %>%
# grouper par famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 100 observations:
dplyr::filter(n > 100) %>%
# do the plot:
ggplot2::ggplot() +
ggplot2::aes(x = n, y = reorder(MSW05_Family, n)) +
ggplot2::geom_col() +
ggplot2::ylab("Family names") +
ggplot2::xlab("Counts") +
ggplot2::ggtitle("Number of observation per family (n > 100)")
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(c(Litter_Per_Year, Longevity) != c(NA, NA))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(c(Litter_Per_Year, Max_Longevity) != c(NA, NA))
?geom_smooth
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 50 observations:
dplyr::filter(n > 50) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(Family))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 50 observations:
dplyr::filter(n > 50) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family))
?facet_wrap
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 50 observations:
dplyr::filter(n > 50) %>%
# mettre Famille en facteur:
dplyr::mutate(MSW05_Family = as.factor(MSW05_Family)) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 50 observations:
dplyr::filter(n > 50)
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family)
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n())
try <- pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n())
View(try)
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = Family) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = MSW05_Family) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = MSW05_Family) +
ggplot2::geom_point(show.legend = FALSE) +
ggplot2::geom_smooth(method = "lm", show.legend = FALSE) +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family)) +
ggplot2::le
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = MSW05_Family) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm", show.legend = FALSE) +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family)) +
ggplot2::le
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = MSW05_Family) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm") +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family)) +
ggplot2::le
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = MSW05_Family) +
ggplot2::geom_point(show.legend = FALSE) +
ggplot2::geom_smooth(method = "lm", show.legend = FALSE) +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 50)") +
ggplot2::facet_wrap(vars(MSW05_Family))
pantheria_clean %>%
# enleve les lignes qui ont des NA dans Litiere ET Longevity:
dplyr::filter(!is.na(Litter_Per_Year), !is.na(Max_Longevity)) %>%
# regrouper par Famille:
dplyr::group_by(MSW05_Family) %>%
# calculer le nombre d'observation par famille avec la fonction mutate et n():
dplyr::mutate(n = n()) %>%
# ne garder que les familles avec + de 10 observations:
dplyr::filter(n > 10) %>%
# plot:
ggplot2::ggplot() +
ggplot2::aes(x = Max_Longevity, y = Litter_Per_Year, color = MSW05_Family) +
ggplot2::geom_point(show.legend = FALSE) +
ggplot2::geom_smooth(method = "lm", show.legend = FALSE) +
ggplot2::ylab("Litter Size") +
ggplot2::xlab("Longevity") +
ggplot2::ggtitle("Litter size as a function of Longevity (n > 10)") +
ggplot2::facet_wrap(vars(MSW05_Family))
